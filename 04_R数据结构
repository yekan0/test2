vector("numeric",5)
vector("complex",5)
vector("logical",5)
vector("character",5)
vector("list",5)

seq.int(3,12)
seq.int(3,12,2)
seq.int(0.1,0.01,-0.01)

n <- 0
1:0
seq_len(n)

pp <- c("peter","piper","picked","a","peck","of","picked","pepper's")
for(i in seq_along(pp))print(pp[i])

length(1:5)
length(c(TRUE,FALSE,NA))

sn <- c("Sheena","leads","Sheila","needs")
length(sn)
nchar(sn)

poincare <- c(1,0,0,0,2,0,2,0)
length(poincare) <- 3
poincare
length(poincare) <- 8
poincare

c(apple=1,banana=2,"kiwi fruit" = 3,4)

x <- 1:4
names(x) <- c("apple","banana","kiwi fruit")
x
names(x)
names(1:4)

x <- (1:5)^2
x[c(1,3,5)]
x[c(-2,-4)]
x[c(TRUE,FALSE,TRUE,FALSE,TRUE)]
names(x) <- c("one","four","nine","sixteen","twentyfive")
x

x[c(1,NA,5)]
x[c(TRUE,FALSE,NA,FALSE,TRUE)]
x[c(-2,NA)]
x[1.9]
x[-1.9]

which(x>10)
which.min(x)
which.max(x)

1:5+1:15
1:5+1:7

rep(1:5,3)
rep(1:5,each = 3)
rep(1:5,times = 1:5)
rep(1:5,length.out = 7)
rep.int(1:5,3)
rep_len(1:5,13)

(three_d_array <- array(
  1:24,
  dim = c(4,3,2),
  dimnames = list(
    c("one","two","three","four"),
    c("ein","zwei","drei"),
    c("un","deux")
  )
))
"array"

(a_matrix <- matrix(
  1:12,
  nrow = 4,
  byrow = TRUE,
  dimnames = list(
    c("one","two","three","four"),
    c("ein","zwei","drei")
  )
))
class(a_matrix)

dim(a_matrix) <- c(6,2)
a_matrix

identical(nrow(a_matrix),NROW(a_matrix))
identical(ncol(a_matrix),NCOL(a_matrix))
recaman <- c(0,1,3,6,2,7,13,20)
nrow(recaman)
NROW(recaman)
ncol(recaman)
NCOL

rownames(a_matrix)
colnames(a_matrix)
dimnames(a_matrix)

a_matrix[1,]
a_matrix[,c("zwei","drei")]

(another_matrix <- matrix(
  seq.int(2,24,2),
  nrow = 4,
  dimnames = list(
    c("five","six","seven","eight"),
    c("vier","funf","sechs")
  )
))
c(a_matrix,another_matrix)

cbind(a_matrix,another_matrix)
rbind(a_matrix,another_matrix)
a_matrix + another_matrix
a_matrix*another_matrix

(another_matrix1<- matrix(1:12,nrow = 2))

t(a_matrix)
a_matrix%*%t(a_matrix)
1:3%o% 4:6
outer(1:3,4:6)

(m <- matrix(c(1,0,1,5,-3,1,2,4,7),nrow = 3))
m^-1
(inverse_of_m <- solve(m))
m%*%inverse_of_m
